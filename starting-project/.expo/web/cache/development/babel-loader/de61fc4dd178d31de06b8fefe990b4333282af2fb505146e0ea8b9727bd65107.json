{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CATEGORIES } from \"../data/dummy-data\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function CategoriesScreen() {\n  console.log('categories', CATEGORIES);\n  return _jsx(FlatList, {\n    data: CATEGORIES,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return _jsx(View, {\n        style: styles.gridItem,\n        children: _jsx(Pressable, {\n          style: styles.button,\n          android_ripple: {\n            color: '#ccc'\n          },\n          onPress: function onPress() {\n            return console.log('pressed');\n          },\n          children: _jsx(View, {\n            styles: styles.innerContainer,\n            children: _jsx(Text, {\n              children: item.title\n            })\n          })\n        })\n      });\n    },\n    keyExtractor: function keyExtractor(_ref2) {\n      var id = _ref2.id;\n      return id;\n    },\n    numColumns: 2\n  });\n}\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1\n  },\n  gridItem: {\n    height: 150,\n    flex: 1,\n    elevation: 3,\n    borderWidth: 1,\n    borderColor: '#dddddd',\n    borderRadius: 10,\n    margin: 16,\n    shadowColor: 'black',\n    shadowOpacity: 0.26,\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowRadius: 10,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    overflow: Platform.OS === 'android' ? 'hidden' : 'visible'\n  },\n  innerContainer: {\n    flex: 1,\n    width: '100%',\n    height: '100%',\n    padding: 10,\n    borderWidth: 1,\n    borderColor: 'black',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"names":["CATEGORIES","jsx","_jsx","CategoriesScreen","console","log","FlatList","data","renderItem","_ref","item","View","style","styles","gridItem","children","Pressable","button","android_ripple","color","onPress","innerContainer","Text","title","keyExtractor","_ref2","id","numColumns","StyleSheet","create","flex","height","elevation","borderWidth","borderColor","borderRadius","margin","shadowColor","shadowOpacity","shadowOffset","width","shadowRadius","backgroundColor","justifyContent","alignItems","overflow","Platform","OS","padding"],"sources":["C:/www/react-native/starting-project/screens/CategoriesScreen.js"],"sourcesContent":["import { View, Text, StyleSheet, FlatList, Pressable, Platform } from 'react-native';\r\nimport { CATEGORIES } from '../data/dummy-data';\r\n\r\nexport default function CategoriesScreen() {\r\n  console.log('categories', CATEGORIES);\r\n  return (\r\n    // <View style={styles.screen}>\r\n      <FlatList\r\n        data={CATEGORIES}\r\n        renderItem={({ item }) => (\r\n          <View style={styles.gridItem}>\r\n            <Pressable\r\n              style={styles.button}\r\n              android_ripple={{ color: '#ccc'}}\r\n              onPress={() => console.log('pressed')}\r\n            >\r\n              <View styles={styles.innerContainer}>\r\n                <Text>{item.title}</Text>\r\n              </View>\r\n            </Pressable>\r\n          </View>\r\n        )}\r\n        keyExtractor={({ id }) => id}\r\n        numColumns={2}\r\n      />\r\n    // </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  // screen: {\r\n  //   flex: 1,\r\n  //   padding: 20,\r\n  //   width: '100%',\r\n  //   justifyContent: 'center',\r\n  //   alergnItems: 'center',\r\n  // },\r\n  button: {\r\n    flex: 1,\r\n  },\r\n  gridItem: {\r\n    height: 150,\r\n    flex: 1,\r\n    elevation: 3,\r\n    borderWidth: 1,\r\n    borderColor: '#dddddd',\r\n    borderRadius: 10,\r\n    margin: 16,\r\n    shadowColor: 'black',\r\n    shadowOpacity: 0.26,\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowRadius: 10,\r\n    backgroundColor: '#fff',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    overflow: Platform.OS === 'android' ? 'hidden' : 'visible',\r\n  },\r\n  innerContainer: {\r\n    flex: 1,\r\n    width: '100%',\r\n    height: '100%',\r\n    padding: 10,\r\n    borderWidth: 1,\r\n    borderColor: 'black',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n"],"mappings":";;;;;;AACA,SAASA,UAAU;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAEhD,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EACzCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,UAAU,CAAC;EACrC,OAEIE,IAAA,CAACI,QAAQ;IACPC,IAAI,EAAEP,UAAW;IACjBQ,UAAU,EAAE,SAAAA,WAAAC,IAAA;MAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAA,OACjBR,IAAA,CAACS,IAAI;QAACC,KAAK,EAAEC,MAAM,CAACC,QAAS;QAAAC,QAAA,EAC3Bb,IAAA,CAACc,SAAS;UACRJ,KAAK,EAAEC,MAAM,CAACI,MAAO;UACrBC,cAAc,EAAE;YAAEC,KAAK,EAAE;UAAM,CAAE;UACjCC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMhB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;UAAA,CAAC;UAAAU,QAAA,EAEtCb,IAAA,CAACS,IAAI;YAACE,MAAM,EAAEA,MAAM,CAACQ,cAAe;YAAAN,QAAA,EAClCb,IAAA,CAACoB,IAAI;cAAAP,QAAA,EAAEL,IAAI,CAACa;YAAK,CAAO;UAAC,CACrB;QAAC,CACE;MAAC,CACR,CAAC;IAAA,CACP;IACFC,YAAY,EAAE,SAAAA,aAAAC,KAAA;MAAA,IAAGC,EAAE,GAAAD,KAAA,CAAFC,EAAE;MAAA,OAAOA,EAAE;IAAA,CAAC;IAC7BC,UAAU,EAAE;EAAE,CACf,CAAC;AAGR;AAEA,IAAMd,MAAM,GAAGe,UAAU,CAACC,MAAM,CAAC;EAQ/BZ,MAAM,EAAE;IACNa,IAAI,EAAE;EACR,CAAC;EACDhB,QAAQ,EAAE;IACRiB,MAAM,EAAE,GAAG;IACXD,IAAI,EAAE,CAAC;IACPE,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,SAAS;IACtBC,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,OAAO;IACpBC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE;MAAEC,KAAK,EAAE,CAAC;MAAET,MAAM,EAAE;IAAE,CAAC;IACrCU,YAAY,EAAE,EAAE;IAChBC,eAAe,EAAE,MAAM;IACvBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,QAAQ,EAAEC,QAAQ,CAACC,EAAE,KAAK,SAAS,GAAG,QAAQ,GAAG;EACnD,CAAC;EACD1B,cAAc,EAAE;IACdS,IAAI,EAAE,CAAC;IACPU,KAAK,EAAE,MAAM;IACbT,MAAM,EAAE,MAAM;IACdiB,OAAO,EAAE,EAAE;IACXf,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,OAAO;IACpBS,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}